a <- "Hola World!"
a <- "Hola World!"
b <-  a
a <- "Hola World!"
b <-  a
a <- "Hola World!"
b <-  a
a <- "Hola World!"
b <-  a
a <- "Hola World!"
b <-  a
# comentarios
c <- a + 1
# comentarios
c <- a + " Texto1"
library(swirl)
detach("package:swirl", unload = TRUE)
library(swirl)
detach("package:swirl", unload = TRUE)
install.packages('swirl')
library(swirl)
library(swirl)
swirl()
library(swirl)
select_language(language = "spanish")
install.packages('swirl')
install.packages("swirl")
library(swirl)
swirl()
library(arules)
dataset <- datasets::mtcars
View(dataset)
datasetTitanic = read.csv('https://gist.githubusercontent.com/michhar/2dfd2de0d4f8727f873422c5d959fff5/raw/fa71405126017e6a37bea592440b4bee94bf7b9e/titanic.csv',
stringsAsFactors = F )
View(datasetTitanic)
setwd("C:/Users/mrusso/Desktop")
setwd("C:/Users/mrusso/jupyter-notebook/NEOLAND_DS2020_student")
setwd("C:/Users/mrusso/jupyter-notebook/NEOLAND_DS2020_student/01-intro-101/r-rstudio/practices/02-EDA-NBA")
nba<-read.csv("../jupyter-notebook/NEOLAND_DS2020_student/01-intro-101/r-rstudio/practices/02-EDA-NBA/NBA_player_of_the_week.csv", header = TRUE, stringsAsFactors = TRUE)
# Antes de proceder, realizaré una copia para poder utilizarla sucesivamente y eliminar eventualmente columnas o manipular datos
nbaBak <- nba
# Verificamos el tipo de dato con class()
class(nba)
# tipo de estructura, 1145 observaciones y 13 variables
str(nba)
# verificamos con head() el resumen de los 6 primeros resultados de todas las 13 variables en columnas
head(nba)
# con ls() extraemos el listado de las variables (columnas)
ls(nba)
# usando names() también extraemos las etiquetas de las columnas
names(nba)
# extraemos las etiquetas de las filas con row.names() o rownames()
row.names(nba)[1:50]
# por no extraer las 1145 filas, he extraido un ejemplo de las primeras 50 filas, como se aprecia no hay nombres asignadas a las filas
# Visualizamos los diferentes niveles del atributo Conference
levels(nba$Conference)
# Con summary contaremos el total de las filas por atributo.
summary(nba$Conference)
# Se evaluan que existen 384 valores faltantes y indicadas con doble apice ""
# podemos crear una copia de nba, con el nba2 y asignar a los valores vacios NA
nba$Conference[nba$Conference == ""] <- NA
# Comprobamos que están asignados correctamente
summary(nba$Conference)
# creamos la variable conference y asignamos sus respetivos valores
conference <- (nba$Conference)
# nuevamente contamos con una tabla la frecuencia de los datos por atributo con summary()
summary(conference)
# Se evaluan que existen 384 valores faltantes de Conference con is.na si el valor encontrado es NA sera TRUE sino FALSE
summary(is.na(conference == TRUE))
# Para poder tener la columna conference, realizamos la tarea de randomizar los NA presentes y sustituirlos con West o East
summary(is.na(conference == TRUE))
# creamos la variable height
height <- (nba$Height)
# creamos la variable player
player <- (nba$Player)
# creamos la variable pos
pos <- (nba$Position)
# creamos la variable season
season <- (nba$Season)
# creamos la variable team
team <- (nba$Team)
#creamos la variable weight
weight <- (nba$Weight)
# puedo utilizar varios métodos para comprobar valores vacios o incluso NA, en este último puedo utilizar la función is.na()
table(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios o NA
summary(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios y una del total de NA's
player[player == ""]
pos[pos == ""]
season[season == ""]
team[team == ""]
weight[weight == ""]
# puedo utilizar varios métodos para comprobar valores vacios o incluso NA, en este último puedo utilizar la función is.na()
table(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios o NA
summary(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios y una del total de NA's
player[player == ""]
pos[pos == ""]
season[season == ""]
team[team == ""]
weight[weight == ""]
table(is.na(nba$Height))
table(is.na(nba$Player))
table(is.na(nba$Position))
table(is.na(nba$Season))
table(is.na(nba$Season))
table(is.na(nba$Team))
table(is.na(nba$Weight))
table(c(height,player,pos,season,team,weight) != "")
table(c(height,player,pos,season,team,weight) = "")
table(c(height,player,pos,season,team,weight) == "")
# puedo utilizar también **summary(c(factores) != "") con la misma regla anterior, su resultado será devolver TRUE si no encuentra valores vacios
summary(c(height,player,pos,season,team,weight) != "")
# también se podría realizar con ifelse enviando unas informaciones
table(ifelse(c(height,player,pos,season,team,weight) != "","Bien! no hay campos vacios","Hay valores vacios"))
tiempo<-as.numeric(nba$Season.short-nba$Draft.Year)
tiempo.moda<-order(table(tiempo),decreasing = T)[1]
draftYear <- (nba$Draft.Year)
head(draftYear)
shortSeason <-(nba$Season.short)
head(shortSeason)
# creamos un df con los valores player, draftYear, shortSeason y Season
draftPlayer <- data.frame(player,pos,draftYear,shortSeason, season, conference)
#comprobamos la estructura
head(draftPlayer)
# creamos la variable calcYears como la diferencia entre el año de la shortSeason y draftYear
calcYears <- (shortSeason - draftYear)
# anadimos los valores calcYears a nuestro df con cbind, es decir juntamos una columna a nuestro df principal
draftPlayer <- cbind(draftPlayer, calcYears, conference)
head(draftPlayer)
# ordenamos CRECIENTE por los anios que han pasado desde el anioDraft
ordenado <- order(draftPlayer$calcYears, decreasing = FALSE)
draftPlayer_ordered <- draftPlayer[ordenado,]
head(draftPlayer_ordered)
# con el df anterior calculamos la moda
# Podemos crear la moda a través de una función ad-Hoc
# creamos la funcion de Moda
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
```{r}
# con el df anterior calculamos la moda
getmode(draftPlayer_ordered$calcYears) # el anio mas repetido es 7
```
```{r}
# con summary podemos también extraer más datos,  el minimo y maximo, asi mediana, y quartiles, ya que lo estamos aplicado a valores numéricos a diferencia de valores con clase del tipo chars, cuando obtendríamos un resumen descriptivo.
summary(draftPlayer_ordered$calcYears)
```
```{r}
# Visualizamos con table() el resumen de los anios desde el draft al anio que ha pasado a ser player of the week
table(draftPlayer_ordered$calcYears)
```
```{r}
# Primero vamos a contar los valores que incluyen el guión "-" con el package stringr::
table(stringr::str_count(height, pattern = "-"))
```
# con la función stringr::str_replace efectuaremos la sustitución de los guiones por un puntos decimales "." y lo almacenamos con la variable heightFt
height <- stringr::str_replace(height, pattern = "-", ".")
head(height) # comprobamos si están realizados los cambios
summary(height)
tail(height)
head(height)
x <- convertCM(6.5) # siendo ya numero devuelve la misma clase
x
class(x)
y <- convertCM("6.5") # esta claro que es una clase tipo cadena de texto y pertanto lo transforma en numerico
class(y)
#inches = as.numeric(strsplit(feet,'.')[[1]][2])
convertCM <- function(feet){
ifelse(class(feet) != "character", cm <- floor(feet*30.48),
cm <- floor(type.convert(feet)*30.48))
return(cm)}
```
x <- convertCM(6.5) # siendo ya numero devuelve la misma clase
x
class(x)
y <- convertCM("6.5") # esta claro que es una clase tipo cadena de texto y pertanto lo transforma en numerico
class(y)
y <- convertCM("6.5")
y <- convertCM("6.5") # esta claro que es una clase tipo cadena de texto y pertanto lo transforma en numerico
class(y)
```
```{r}
class(height[1])
```
heightFt <- convertCM(height[1:1055])
class(heightFt)
table(heightFt[1:10])
str(heightFt)
heightPly <- c(heightFt,heightCm)
table(heightPly)
str(heightPly)
```{r}
heightPly <- c(heightFt,heightCm)
table(heightPly)
str(heightPly)
```
```{r}
heightPly <- c(heightFt,heightCm)
table(heightPly)
str(heightPly)
```
```{r}
heightPly <- c(heightFt,heightCm)
table(heightPly)
str(heightPly)
```
nba<-read.csv("../jupyter-notebook/NEOLAND_DS2020_student/01-intro-101/r-rstudio/practices/02-EDA-NBA/NBA_player_of_the_week.csv", header = TRUE, stringsAsFactors = TRUE)
# Antes de proceder, realizaré una copia para poder utilizarla sucesivamente y eliminar eventualmente columnas o manipular datos
nbaBak <- nba
# Verificamos el tipo de dato con class()
class(nba)
# tipo de estructura, 1145 observaciones y 13 variables
str(nba)
# verificamos con head() el resumen de los 6 primeros resultados de todas las 13 variables en columnas
head(nba)
# verificamos con tail() los ultimos 6 resultados de todas las variables en columnas
tail(nba)
# con ls() extraemos el listado de las variables (columnas)
ls(nba)
# usando names() también extraemos las etiquetas de las columnas
names(nba)
# extraemos las etiquetas de las filas con row.names() o rownames()
row.names(nba)[1:50]
# por no extraer las 1145 filas, he extraido un ejemplo de las primeras 50 filas, como se aprecia no hay nombres asignadas a las filas
# Visualizamos los diferentes niveles del atributo Conference
levels(nba$Conference)
# Con summary contaremos el total de las filas por atributo.
summary(nba$Conference)
# Se evaluan que existen 384 valores faltantes y indicadas con doble apice ""
# podemos crear una copia de nba, con el nba2 y asignar a los valores vacios NA
nba$Conference[nba$Conference == ""] <- NA
# Comprobamos que están asignados correctamente
summary(nba$Conference)
# creamos la variable conference y asignamos sus respetivos valores
conference <- (nba$Conference)
# nuevamente contamos con una tabla la frecuencia de los datos por atributo con summary()
summary(conference)
# Se evaluan que existen 384 valores faltantes de Conference con is.na si el valor encontrado es NA sera TRUE sino FALSE
summary(is.na(conference == TRUE))
# Para poder tener la columna conference, realizamos la tarea de randomizar los NA presentes y sustituirlos con West o East
summary(is.na(conference == TRUE))
# creamos la variable height
height <- (nba$Height)
# creamos la variable player
player <- (nba$Player)
# creamos la variable pos
pos <- (nba$Position)
# creamos la variable season
season <- (nba$Season)
# creamos la variable team
team <- (nba$Team)
#creamos la variable weight
weight <- (nba$Weight)
# puedo utilizar varios métodos para comprobar valores vacios o incluso NA, en este último puedo utilizar la función is.na()
table(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios o NA
summary(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios y una del total de NA's
player[player == ""]
pos[pos == ""]
season[season == ""]
team[team == ""]
weight[weight == ""]
table(is.na(nba$Height))
table(is.na(nba$Player))
table(is.na(nba$Position))
table(is.na(nba$Season))
table(is.na(nba$Season))
table(is.na(nba$Team))
table(is.na(nba$Weight))
table(c(height,player,pos,season,team,weight) == "")
# puedo utilizar también **summary(c(factores) != "") con la misma regla anterior, su resultado será devolver TRUE si no encuentra valores vacios
summary(c(height,player,pos,season,team,weight) != "")
# también se podría realizar con ifelse enviando unas informaciones
table(ifelse(c(height,player,pos,season,team,weight) != "","Bien! no hay campos vacios","Hay valores vacios"))
tiempo<-as.numeric(nba$Season.short-nba$Draft.Year)
tiempo.moda<-order(table(tiempo),decreasing = T)[1]
draftYear <- (nba$Draft.Year)
head(draftYear)
shortSeason <-(nba$Season.short)
head(shortSeason)
# creamos un df con los valores player, draftYear, shortSeason y Season
draftPlayer <- data.frame(player,pos,draftYear,shortSeason, season, conference)
#comprobamos la estructura
head(draftPlayer)
# creamos la variable calcYears como la diferencia entre el año de la shortSeason y draftYear
calcYears <- (shortSeason - draftYear)
# anadimos los valores calcYears a nuestro df con cbind, es decir juntamos una columna a nuestro df principal
draftPlayer <- cbind(draftPlayer, calcYears, conference)
head(draftPlayer)
```{r}
boxplot(nba$Height, main="Altura de los jugadores NBA" )
```
```{r}
boxplot(nba$Height, main="Altura de los jugadores NBA" )
```
library(plyr)
nba$Position<-mapvalues(nba$Position, from = c("F-C", "FC","G-F","GF"), to = c("F", "F","G","G"))
nba$Position<-mapvalues(nba$Position, from = c("F", "G","PG","SG","SF","PF","C"), to = c("Forward", "Guard","Point Guard","Shooting Guard","Small Forward","Power Forward","Center"))
position.sort <- sort( table(nba$Position), decreasing=TRUE )
position.top <- position.sort[1]
position.top.name <- names( position.top )
position.top.name
```{r}
library(plyr)
nba$Position<-mapvalues(nba$Position, from = c("F-C", "FC","G-F","GF"), to = c("F", "F","G","G"))
nba$Position<-mapvalues(nba$Position, from = c("F", "G","PG","SG","SF","PF","C"), to = c("Forward", "Guard","Point Guard","Shooting Guard","Small Forward","Power Forward","Center"))
position.sort <- sort( table(nba$Position), decreasing=TRUE )
position.top <- position.sort[1]
position.top.name <- names( position.top )
position.top.name
nba<-read.csv("../jupyter-notebook/NEOLAND_DS2020_student/01-intro-101/r-rstudio/practices/02-EDA-NBA/NBA_player_of_the_week.csv", header = TRUE, stringsAsFactors = TRUE)
# Antes de proceder, realizaré una copia para poder utilizarla sucesivamente y eliminar eventualmente columnas o manipular datos
nbaBak <- nba
# Verificamos el tipo de dato con class()
class(nba)
# tipo de estructura, 1145 observaciones y 13 variables
str(nba)
# verificamos con head() el resumen de los 6 primeros resultados de todas las 13 variables en columnas
head(nba)
# verificamos con tail() los ultimos 6 resultados de todas las variables en columnas
tail(nba)
# con ls() extraemos el listado de las variables (columnas)
ls(nba)
# usando names() también extraemos las etiquetas de las columnas
names(nba)
# extraemos las etiquetas de las filas con row.names() o rownames()
row.names(nba)[1:50]
# por no extraer las 1145 filas, he extraido un ejemplo de las primeras 50 filas, como se aprecia no hay nombres asignadas a las filas
# Visualizamos los diferentes niveles del atributo Conference
levels(nba$Conference)
# Con summary contaremos el total de las filas por atributo.
summary(nba$Conference)
# Se evaluan que existen 384 valores faltantes y indicadas con doble apice ""
# podemos crear una copia de nba, con el nba2 y asignar a los valores vacios NA
nba$Conference[nba$Conference == ""] <- NA
# Comprobamos que están asignados correctamente
summary(nba$Conference)
# creamos la variable conference y asignamos sus respetivos valores
conference <- (nba$Conference)
# nuevamente contamos con una tabla la frecuencia de los datos por atributo con summary()
summary(conference)
# Se evaluan que existen 384 valores faltantes de Conference con is.na si el valor encontrado es NA sera TRUE sino FALSE
summary(is.na(conference == TRUE))
# Para poder tener la columna conference, realizamos la tarea de randomizar los NA presentes y sustituirlos con West o East
summary(is.na(conference == TRUE))
# creamos la variable height
height <- (nba$Height)
# creamos la variable player
player <- (nba$Player)
# creamos la variable pos
pos <- (nba$Position)
# creamos la variable season
season <- (nba$Season)
# creamos la variable team
team <- (nba$Team)
#creamos la variable weight
weight <- (nba$Weight)
# puedo utilizar varios métodos para comprobar valores vacios o incluso NA, en este último puedo utilizar la función is.na()
table(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios o NA
summary(height[height == "" || NA]) # me devolverá una tabla con los valores ceros si no encuentra vacios y una del total de NA's
player[player == ""]
pos[pos == ""]
season[season == ""]
team[team == ""]
weight[weight == ""]
table(is.na(nba$Height))
table(is.na(nba$Player))
table(is.na(nba$Position))
table(is.na(nba$Season))
table(is.na(nba$Season))
table(is.na(nba$Team))
table(is.na(nba$Weight))
table(c(height,player,pos,season,team,weight) == "")
# puedo utilizar también **summary(c(factores) != "") con la misma regla anterior, su resultado será devolver TRUE si no encuentra valores vacios
summary(c(height,player,pos,season,team,weight) != "")
# también se podría realizar con ifelse enviando unas informaciones
table(ifelse(c(height,player,pos,season,team,weight) != "","Bien! no hay campos vacios","Hay valores vacios"))
tiempo<-as.numeric(nba$Season.short-nba$Draft.Year)
tiempo.moda<-order(table(tiempo),decreasing = T)[1]
draftYear <- (nba$Draft.Year)
head(draftYear)
shortSeason <-(nba$Season.short)
head(shortSeason)
# creamos un df con los valores player, draftYear, shortSeason y Season
draftPlayer <- data.frame(player,pos,draftYear,shortSeason, season, conference)
#comprobamos la estructura
head(draftPlayer)
# creamos la variable calcYears como la diferencia entre el año de la shortSeason y draftYear
calcYears <- (shortSeason - draftYear)
# anadimos los valores calcYears a nuestro df con cbind, es decir juntamos una columna a nuestro df principal
draftPlayer <- cbind(draftPlayer, calcYears, conference)
head(draftPlayer)
# imprimimos el head y table con el resumen
head(pos)
table(pos)
summary(pos)
str(pos)
```{r}
boxplot.stats(nba.unique2$weightPly, do.conf = TRUE, do.out = FALSE, coef = 1.5)
```
# summary del peso de los jugadores
outliers <- boxplot.stats(nba.unique2$weightPly)$out
outliers
dataset_gijon <- read.csv("http://opendata.gijon.es/descargar.php?id=1&tipo=CSV", encoding = 'UTF-8', stringsAsFactors = FALSE)
# Veamos los 10 primeros resultados
head(dataset_gijon[1:8], 10)
head(dataset_gijon[9:17], 10)
head(dataset_gijon[18:22], 10)
# Totalizamos los datos resultantes
dim(dataset_gijon)
